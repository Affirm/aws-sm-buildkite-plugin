#!/usr/bin/env bash

set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/shared.bash
. "$DIR/../lib/shared.bash"

echo "--- :aws::key: Reading secrets from AWS SM"

load_secret_into_env() {
  local export_name="$1"
  local secret_id="$2"
  local json_key="$3"
  local secret_value
  echo "Reading ${secret_id} from AWS SM into environment variable ${export_name}"
  secret_value="$(get_secret_value "${secret_id}")"
  # parse JSON key if we have one
  if [[ -n "${json_key}" ]] ; then
    echo "Extracting JSON value at '${json_key}' from secret"
    secret_value="$(jq -r "${json_key}" <<< "${secret_value}")"
  fi
  export "${export_name}=${secret_value}"
}

# parse env items
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_SM_ENV_) ]] ; then
    # Special nested value (rather than just a secret id)
    if [[ $name =~ (_SECRET_ID)$ ]] ; then
      # get the export name from the key, e.g.
      # env:
      #   KEY_NAME:
      #     secret-id: 'my-secret-id'
      export_name=$(echo "${name}" | sed 's/^BUILDKITE_PLUGIN_AWS_SM_ENV_//' | sed 's/_SECRET_ID$//')
      # load the JSON key if we have one
      json_key_var="BUILDKITE_PLUGIN_AWS_SM_ENV_${export_name}_JSON_KEY"
      json_key="${!json_key_var:-}"
    elif [[ $name =~ (_JSON_KEY)$ ]] ; then
      # ignore this, is used for when loading via _SECRET_ID
      continue
    else
      # Handle plain key=value, e.g
      # env:
      #   KEY_NAME: 'secret-id'
      export_name=$(echo "${name}" | sed 's/^BUILDKITE_PLUGIN_AWS_SM_ENV_//')
      json_key=""
    fi
    secret_id="$(strip_quotes "${!name}")"
    load_secret_into_env "${export_name}" "${secret_id}" "${json_key}"
  fi
done < <(env | sort)
